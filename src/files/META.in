description = "Ocsigen server library"
version = "dev"
requires = "%%NAME%%.commandline,%%NAME%%.polytables,%%NAME%%.http,%%NAME%%.baselib"
archive(byte) = "ocsigenserver.cma"
archive(native) = "ocsigenserver.cmxa"

package "polytables" (
  exists_if = "polytables.cmo,polytables.cmx"
  version = "[distributed with Ocsigen server]"
  description = "Polymorphic tables"
  archive(byte) = "polytables.cmo"
  archive(native) = "polytables.cmx"
)

package "commandline" (
  description = "Read the commandline during server initialization"
  version = "[distributed with Ocsigen server]"
  archive(byte) = "parsecommandline.cma"
  archive(native) = "parsecommandline.cmxa"
  archive(byte,nocommandline) = "donotparsecommandline.cma"
  archive(native,nocommandline) = "donotparsecommandline.cmxa"
)

package "baselib" (
  requires = "%%DEPS%%"
  version = "[distributed with Ocsigen server]"
  description = "Base library for Ocsigen server"
  archive(byte) = "baselib.cma"
  archive(native) = "baselib.cmxa"
  package "base" (
    description = "Just extensions of the stdlib (also for usage on the client side)"
    version = "[distributed with Ocsigen server]"
    requires = "%%BASEDEPS%%"
    archive(byte) = "ocsigen_lib_base.cmo"
    archive(native) = "ocsigen_lib_base.cmx"
  )
)

package "http" (
  requires = "%%NAME%%.baselib,lwt.ssl,tyxml"
  version = "[distributed with Ocsigen server]"
  description = "HTTP library for Ocsigen server"
  archive(byte) = "http.cma"
  archive(native) = "http.cmxa"
)

package "cookies" (
  version = "[distributed with Ocsigen server]"
  archive(byte) = "ocsigen_cookies.cmo"
)

package "ext" (
  directory = "extensions"
  version = "[distributed with Ocsigen server]"
  description = "Basic extensions for Ocsigen server"

  package "redirectmod" (
    exists_if = "redirectmod.cmo,redirectmod.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "HTTP redirections"
    archive(byte) = "redirectmod.cmo"
    archive(native) = "redirectmod.cmx"
  )

  package "outputfilter" (
    exists_if = "outputfilter.cmo,outputfilter.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Changing HTTP answers before sending"
    archive(byte) = "outputfilter.cmo"
    archive(native) = "outputfilter.cmx"
  )

  package "userconf" (
    exists_if = "userconf.cmo,userconf.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Allowing users to have their own configuration files"
    archive(byte) = "userconf.cmo"
    archive(native) = "userconf.cmx"
  )

  package "staticmod" (
    exists_if = "staticmod.cmo,staticmod.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Serving static files"
    archive(byte) = "staticmod.cmo"
    archive(native) = "staticmod.cmx"
  )

  package "revproxy" (
    exists_if = "revproxy.cmo,revproxy.cmx"
    version = "[distributed with Ocsigen server]"
    description = "Reverse proxy"
    archive(byte) = "revproxy.cmo"
    archive(native) = "revproxy.cmx"
  )

  package "accesscontrol" (
    exists_if = "accesscontrol.cmo,accesscontrol.cmx"
    requires = "ocsigenserver,ipaddr"
    version = "[distributed with Ocsigen server]"
    description = "Filtering HTTP requests"
    archive(byte) = "accesscontrol.cmo"
    archive(native) = "accesscontrol.cmx"
  )

  package "cors" (
    exists_if = "cors.cmo,cors.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Handling cross-origin requests"
    archive(byte) = "cors.cmo"
    archive(native) = "cors.cmx"
  )

  package "extendconfiguration" (
    exists_if = "extendconfiguration.cmo,extendconfiguration.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Updating server options"
    archive(byte) = "extendconfiguration.cmo"
    archive(native) = "extendconfiguration.cmx"
  )

  package "authbasic" (
    exists_if = "authbasic.cmo,authbasic.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Basic HTTP Authentication"
    archive(byte) = "authbasic.cmo"
    archive(native) = "authbasic.cmx"
  )

  package "cgimod" (
    exists_if = "cgimod.cmo,cgimod.cmx"
    version = "[distributed with Ocsigen server]"
    description = "CGI support"
    archive(byte) = "cgimod.cmo"
    archive(native) = "cgimod.cmx"
  )

  package "ocsipersist-sqlite" (
    exists_if = "ocsipersist-sqlite.cma,ocsipersist-sqlite.cmxa"
    requires = "sqlite3"
    version = "[distributed with Ocsigen server]"
    description = "Persistent data storage with SQLite3"
    archive(byte) = "ocsipersist-sqlite.cma"
    archive(native) = "ocsipersist-sqlite.cmxa"
  )

  package "ocsipersist-dbm" (
    exists_if = "ocsipersist-dbm.cma,ocsipersist-dbm.cmxa"
    version = "[distributed with Ocsigen server]"
    description = "Persistent data storage with DBM"
    archive(byte) = "ocsipersist-dbm.cma"
    archive(native) = "ocsipersist-dbm.cmxa"
  )

  package "deflatemod" (
    exists_if = "deflatemod.cmo,deflatemod.cmx"
    requires = "ocsigenserver,%%CAMLZIPNAME%%"
    version = "[distributed with Ocsigen server]"
    description = "Compressing HTTP reply bodies"
    archive(byte) = "deflatemod.cmo"
    archive(native) = "deflatemod.cmx"
  )

  package "rewritemod" (
    exists_if = "rewritemod.cmo,rewritemod.cmx"
    requires = "ocsigenserver"
    version = "[distributed with Ocsigen server]"
    description = "Rewriting URLs"
    archive(byte) = "rewritemod.cmo"
    archive(native) = "rewritemod.cmx"
  )

  package "comet" (
    exists_if = "ocsigen_comet.cmo,ocsigen_comet.cmx"
    requires = "ocsigenserver,lwt.react"
    version = "[distributed with Ocsigen server]"
    description = "Comet server-to-client communication"
    archive(byte) = "ocsigen_comet.cmo"
    archive(native) = "ocsigen_comet.cmx"
  )

)
