# OASIS_START
# DO NOT EDIT (digest: fb5b4c310aac0c236cae2665782765a9)
version = "0.1"
description = "HTTP Server in OCaml"
requires =
"ocsigenserver.polytables ocsigenserver.baselib ocsigenserver.http ocsigenserver.server ocsigenserver.ext"
archive(byte) = "ocsigenserver.cma"
archive(byte, plugin) = "ocsigenserver.cma"
archive(native) = "ocsigenserver.cmxa"
archive(native, plugin) = "ocsigenserver.cmxs"
exists_if = "ocsigenserver.cma"
package "server" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 requires =
 "ocsigenserver.polytables ocsigenserver.baselib ocsigenserver.http tyxml.parser"
 archive(byte) = "server.cma"
 archive(byte, plugin) = "server.cma"
 archive(native) = "server.cmxa"
 archive(native, plugin) = "server.cmxs"
 exists_if = "server.cma"
)

package "polytables" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 archive(byte) = "polytables.cma"
 archive(byte, plugin) = "polytables.cma"
 archive(native) = "polytables.cmxa"
 archive(native, plugin) = "polytables.cmxs"
 exists_if = "polytables.cma"
)

package "nocommandline" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 archive(byte) = "nocommandline.cma"
 archive(byte, plugin) = "nocommandline.cma"
 archive(native) = "nocommandline.cmxa"
 archive(native, plugin) = "nocommandline.cmxs"
 exists_if = "nocommandline.cma"
)

package "http" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 requires = "ocsigenserver.baselib tyxml lwt.ssl ipaddr"
 archive(byte) = "http.cma"
 archive(byte, plugin) = "http.cma"
 archive(native) = "http.cmxa"
 archive(native, plugin) = "http.cmxs"
 exists_if = "http.cma"
)

package "ext" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 archive(byte) = "ext.cma"
 archive(byte, plugin) = "ext.cma"
 archive(native) = "ext.cmxa"
 archive(native, plugin) = "ext.cmxs"
 exists_if = "ext.cma"
 package "userconf" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "userconf.cma"
  archive(byte, plugin) = "userconf.cma"
  archive(native) = "userconf.cmxa"
  archive(native, plugin) = "userconf.cmxs"
  exists_if = "userconf.cma"
 )
 
 package "staticmod" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "staticmod.cma"
  archive(byte, plugin) = "staticmod.cma"
  archive(native) = "staticmod.cmxa"
  archive(native, plugin) = "staticmod.cmxs"
  exists_if = "staticmod.cma"
 )
 
 package "rewritemod" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "rewritemod.cma"
  archive(byte, plugin) = "rewritemod.cma"
  archive(native) = "rewritemod.cmxa"
  archive(native, plugin) = "rewritemod.cmxs"
  exists_if = "rewritemod.cma"
 )
 
 package "revproxy" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "revproxy.cma"
  archive(byte, plugin) = "revproxy.cma"
  archive(native) = "revproxy.cmxa"
  archive(native, plugin) = "revproxy.cmxs"
  exists_if = "revproxy.cma"
 )
 
 package "redirectmod" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "redirectmod.cma"
  archive(byte, plugin) = "redirectmod.cma"
  archive(native) = "redirectmod.cmxa"
  archive(native, plugin) = "redirectmod.cmxs"
  exists_if = "redirectmod.cma"
 )
 
 package "outputfilter" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "outputfilter.cma"
  archive(byte, plugin) = "outputfilter.cma"
  archive(native) = "outputfilter.cmxa"
  archive(native, plugin) = "outputfilter.cmxs"
  exists_if = "outputfilter.cma"
 )
 
 package "ocsipersist-sqlite" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver sqlite3"
  archive(byte) = "ocsipersist-sqlite.cma"
  archive(byte, plugin) = "ocsipersist-sqlite.cma"
  archive(native) = "ocsipersist-sqlite.cmxa"
  archive(native, plugin) = "ocsipersist-sqlite.cmxs"
  exists_if = "ocsipersist-sqlite.cma"
 )
 
 package "ocsipersist-dbm" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver dbm"
  archive(byte) = "ocsipersist-dbm.cma"
  archive(byte, plugin) = "ocsipersist-dbm.cma"
  archive(native) = "ocsipersist-dbm.cmxa"
  archive(native, plugin) = "ocsipersist-dbm.cmxs"
  exists_if = "ocsipersist-dbm.cma"
 )
 
 package "ocsigen_comet" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver react"
  archive(byte) = "ocsigen_comet.cma"
  archive(byte, plugin) = "ocsigen_comet.cma"
  archive(native) = "ocsigen_comet.cmxa"
  archive(native, plugin) = "ocsigen_comet.cmxs"
  exists_if = "ocsigen_comet.cma"
 )
 
 package "extensiontemplate" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "extensiontemplate.cma"
  archive(byte, plugin) = "extensiontemplate.cma"
  archive(native) = "extensiontemplate.cmxa"
  archive(native, plugin) = "extensiontemplate.cmxs"
  exists_if = "extensiontemplate.cma"
 )
 
 package "extendconfiguration" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "extendconfiguration.cma"
  archive(byte, plugin) = "extendconfiguration.cma"
  archive(native) = "extendconfiguration.cmxa"
  archive(native, plugin) = "extendconfiguration.cmxs"
  exists_if = "extendconfiguration.cma"
 )
 
 package "deflatemod" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver camlzip"
  archive(byte) = "deflatemod.cma"
  archive(byte, plugin) = "deflatemod.cma"
  archive(native) = "deflatemod.cmxa"
  archive(native, plugin) = "deflatemod.cmxs"
  exists_if = "deflatemod.cma"
 )
 
 package "cors" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "cors.cma"
  archive(byte, plugin) = "cors.cma"
  archive(native) = "cors.cmxa"
  archive(native, plugin) = "cors.cmxs"
  exists_if = "cors.cma"
 )
 
 package "cgimod" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "cgimod.cma"
  archive(byte, plugin) = "cgimod.cma"
  archive(native) = "cgimod.cmxa"
  archive(native, plugin) = "cgimod.cmxs"
  exists_if = "cgimod.cma"
 )
 
 package "authbasic" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "authbasic.cma"
  archive(byte, plugin) = "authbasic.cma"
  archive(native) = "authbasic.cmxa"
  archive(native, plugin) = "authbasic.cmxs"
  exists_if = "authbasic.cma"
 )
 
 package "accesscontrol" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "ocsigenserver"
  archive(byte) = "accesscontrol.cma"
  archive(byte, plugin) = "accesscontrol.cma"
  archive(native) = "accesscontrol.cmxa"
  archive(native, plugin) = "accesscontrol.cmxs"
  exists_if = "accesscontrol.cma"
 )
)

package "cookies" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 archive(byte) = "ocsigen_cookies.cmo"
 archive(native) = "ocsigen_cookies.cmx"
 exists_if = "ocsigen_cookies.cmo"
)

package "commandline" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 archive(byte) = "commandline.cma"
 archive(byte, plugin) = "commandline.cma"
 archive(native) = "commandline.cmxa"
 archive(native, plugin) = "commandline.cmxs"
 exists_if = "commandline.cma"
)

package "baselib" (
 version = "0.1"
 description = "HTTP Server in OCaml"
 requires =
 "lwt lwt.unix lwt.syntax optcomp netstring netstring-pcre cryptokit findlib dynlink"
 archive(byte) = "baselib.cma"
 archive(byte, plugin) = "baselib.cma"
 archive(native) = "baselib.cmxa"
 archive(native, plugin) = "baselib.cmxs"
 exists_if = "baselib.cma"
 package "base" (
  version = "0.1"
  description = "HTTP Server in OCaml"
  requires = "lwt"
  archive(byte) = "ocsigen_lib_base.cmo"
  archive(native) = "ocsigen_lib_base.cmx"
  exists_if = "ocsigen_lib_base.cmo"
 )
)
# OASIS_STOP

