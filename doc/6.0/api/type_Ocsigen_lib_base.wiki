<<code language="ocaml" | sig
  exception Ocsigen_Internal_Error of string
  exception Input_is_too_large
  exception Ocsigen_Bad_Request
  exception Ocsigen_Request_too_long
  val ( >>= ) : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
  val ( >|= ) : 'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t
  val ( !! ) : 'a Stdlib.Lazy.t -> 'a
  val ( |> ) : 'a -> ('a -> 'b) -> 'b
  val ( @@ ) : ('a -> 'b) -> 'a -> 'b
  external id : 'a -> 'a = "%identity"
  val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
  val curry : ('a * 'b -> 'c) -> 'a -> 'b -> 'c
  val uncurry : ('a -> 'b -> 'c) -> 'a * 'b -> 'c
  module Tuple3 :
    sig
      val fst : 'a * 'b * 'c -> 'a
      val snd : 'a * 'b * 'c -> 'b
      val thd : 'a * 'b * 'c -> 'c
    end
  type poly
  val to_poly : 'a -> Ocsigen_lib_base.poly
  val from_poly : Ocsigen_lib_base.poly -> 'a
  type yesnomaybe = Yes | No | Maybe
  type ('a, 'b) leftright = Left of 'a | Right of 'b
  val advert : string
  module Option :
    sig
      type 'a t = 'a option
      val map :
        ('a -> 'b) ->
        'a Ocsigen_lib_base.Option.t -> 'b Ocsigen_lib_base.Option.t
      val get : (unit -> 'a) -> 'a Ocsigen_lib_base.Option.t -> 'a
      val get' : 'a -> 'a Ocsigen_lib_base.Option.t -> 'a
      val iter : ('a -> unit) -> 'a Ocsigen_lib_base.Option.t -> unit
      val return : 'a -> 'a Ocsigen_lib_base.Option.t
      val bind :
        'a Ocsigen_lib_base.Option.t ->
        ('a -> 'b Ocsigen_lib_base.Option.t) -> 'b Ocsigen_lib_base.Option.t
      val to_list : 'a Ocsigen_lib_base.Option.t -> 'a list
      module Lwt :
        sig
          val map :
            ('a -> 'b Lwt.t) ->
            'a Ocsigen_lib_base.Option.t ->
            'b Ocsigen_lib_base.Option.t Lwt.t
          val get :
            (unit -> 'a Lwt.t) -> 'a Ocsigen_lib_base.Option.t -> 'a Lwt.t
          val get' : 'a Lwt.t -> 'a Ocsigen_lib_base.Option.t -> 'a Lwt.t
          val iter :
            ('a -> unit Lwt.t) -> 'a Ocsigen_lib_base.Option.t -> unit Lwt.t
          val bind :
            'a Ocsigen_lib_base.Option.t ->
            ('a -> 'b Ocsigen_lib_base.Option.t Lwt.t) ->
            'b Ocsigen_lib_base.Option.t Lwt.t
        end
    end
  module List :
    sig
      type 'a t = 'a list = [] | (::) of 'a * 'a list
      val length : 'a list -> int
      val compare_lengths : 'a list -> 'b list -> int
      val compare_length_with : 'a list -> int -> int
      val cons : 'a -> 'a list -> 'a list
      val hd : 'a list -> 'a
      val tl : 'a list -> 'a list
      val nth : 'a list -> int -> 'a
      val nth_opt : 'a list -> int -> 'a option
      val rev : 'a list -> 'a list
      val init : int -> (int -> 'a) -> 'a list
      val append : 'a list -> 'a list -> 'a list
      val rev_append : 'a list -> 'a list -> 'a list
      val concat : 'a list list -> 'a list
      val flatten : 'a list list -> 'a list
      val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
      val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int
      val iter : ('a -> unit) -> 'a list -> unit
      val iteri : (int -> 'a -> unit) -> 'a list -> unit
      val map : ('a -> 'b) -> 'a list -> 'b list
      val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
      val rev_map : ('a -> 'b) -> 'a list -> 'b list
      val filter_map : ('a -> 'b option) -> 'a list -> 'b list
      val concat_map : ('a -> 'b list) -> 'a list -> 'b list
      val fold_left_map :
        ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
      val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
      val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
      val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val fold_left2 :
        ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a
      val fold_right2 :
        ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
      val for_all : ('a -> bool) -> 'a list -> bool
      val exists : ('a -> bool) -> 'a list -> bool
      val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val mem : 'a -> 'a list -> bool
      val memq : 'a -> 'a list -> bool
      val find : ('a -> bool) -> 'a list -> 'a
      val find_opt : ('a -> bool) -> 'a list -> 'a option
      val find_map : ('a -> 'b option) -> 'a list -> 'b option
      val filter : ('a -> bool) -> 'a list -> 'a list
      val find_all : ('a -> bool) -> 'a list -> 'a list
      val filteri : (int -> 'a -> bool) -> 'a list -> 'a list
      val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
      val partition_map :
        ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list
      val assoc : 'a -> ('a * 'b) list -> 'b
      val assoc_opt : 'a -> ('a * 'b) list -> 'b option
      val assq : 'a -> ('a * 'b) list -> 'b
      val assq_opt : 'a -> ('a * 'b) list -> 'b option
      val mem_assoc : 'a -> ('a * 'b) list -> bool
      val mem_assq : 'a -> ('a * 'b) list -> bool
      val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
      val split : ('a * 'b) list -> 'a list * 'b list
      val combine : 'a list -> 'b list -> ('a * 'b) list
      val sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list
      val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
      val to_seq : 'a list -> 'a Seq.t
      val of_seq : 'a Seq.t -> 'a list
      val map_filter : ('a -> 'b option) -> 'a list -> 'b list
      val last : 'a list -> 'a
      val assoc_remove : 'a -> ('a * 'b) list -> 'b * ('a * 'b) list
      val remove_first_if_any : 'a -> 'a list -> 'a list
      val remove_first_if_any_q : 'a -> 'a list -> 'a list
      val remove_first : 'a -> 'a list -> 'a list
      val remove_first_q : 'a -> 'a list -> 'a list
      val remove_all : 'a -> 'a list -> 'a list
      val remove_all_q : 'a -> 'a list -> 'a list
      val remove_all_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val remove_all_assoc_q : 'a -> ('a * 'b) list -> ('a * 'b) list
      val is_prefix : 'a list -> 'a list -> bool
      val chop : int -> 'a list -> 'a list
      val split_at : int -> 'a list -> 'a list * 'a list
    end
  module Clist :
    sig
      type 'a t
      type 'a node
      val make : 'a -> 'a Ocsigen_lib_base.Clist.node
      val create : unit -> 'a Ocsigen_lib_base.Clist.t
      val insert :
        'a Ocsigen_lib_base.Clist.t -> 'a Ocsigen_lib_base.Clist.node -> unit
      val remove : 'a Ocsigen_lib_base.Clist.node -> unit
      val value : 'a Ocsigen_lib_base.Clist.node -> 'a
      val in_list : 'a Ocsigen_lib_base.Clist.node -> bool
      val is_empty : 'a Ocsigen_lib_base.Clist.t -> bool
      val iter : ('a -> unit) -> 'a Ocsigen_lib_base.Clist.t -> unit
      val fold_left :
        ('a -> 'b -> 'a) -> 'a -> 'b Ocsigen_lib_base.Clist.t -> 'a
    end
  module Int :
    sig
      module Table :
        sig
          type key = int
          type +!'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val min_binding_opt : 'a t -> (key * 'a) option
          val max_binding : 'a t -> key * 'a
          val max_binding_opt : 'a t -> (key * 'a) option
          val choose : 'a t -> key * 'a
          val choose_opt : 'a t -> (key * 'a) option
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val find_opt : key -> 'a t -> 'a option
          val find_first : (key -> bool) -> 'a t -> key * 'a
          val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
          val find_last : (key -> bool) -> 'a t -> key * 'a
          val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
          val to_seq : 'a t -> (key * 'a) Seq.t
          val to_rev_seq : 'a t -> (key * 'a) Seq.t
          val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
          val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
          val of_seq : (key * 'a) Seq.t -> 'a t
        end
    end
  module String_base :
    sig
      type t = string
      val make : int -> char -> string
      val init : int -> (int -> char) -> string
      external length : string -> int = "%string_length"
      external get : string -> int -> char = "%string_safe_get"
      val concat : string -> string list -> string
      val equal : t -> t -> bool
      val compare : t -> t -> int
      val contains_from : string -> int -> char -> bool
      val rcontains_from : string -> int -> char -> bool
      val contains : string -> char -> bool
      val sub : string -> int -> int -> string
      val split_on_char : char -> string -> string list
      val map : (char -> char) -> string -> string
      val mapi : (int -> char -> char) -> string -> string
      val trim : string -> string
      val escaped : string -> string
      val uppercase_ascii : string -> string
      val lowercase_ascii : string -> string
      val capitalize_ascii : string -> string
      val uncapitalize_ascii : string -> string
      val iter : (char -> unit) -> string -> unit
      val iteri : (int -> char -> unit) -> string -> unit
      val index_from : string -> int -> char -> int
      val index_from_opt : string -> int -> char -> int option
      val rindex_from : string -> int -> char -> int
      val rindex_from_opt : string -> int -> char -> int option
      val index : string -> char -> int
      val index_opt : string -> char -> int option
      val rindex : string -> char -> int
      val rindex_opt : string -> char -> int option
      val to_seq : t -> char Seq.t
      val to_seqi : t -> (int * char) Seq.t
      val of_seq : char Seq.t -> t
      external create : int -> bytes = "caml_create_string"
      external set : bytes -> int -> char -> unit = "%string_safe_set"
      val blit : string -> int -> bytes -> int -> int -> unit
      val copy : string -> string
      val fill : bytes -> int -> int -> char -> unit
      val uppercase : string -> string
      val lowercase : string -> string
      val capitalize : string -> string
      val uncapitalize : string -> string
      external unsafe_get : string -> int -> char = "%string_unsafe_get"
      external unsafe_set : bytes -> int -> char -> unit
        = "%string_unsafe_set"
      external unsafe_blit : string -> int -> bytes -> int -> int -> unit
        = "caml_blit_string" [@@noalloc]
      external unsafe_fill : bytes -> int -> int -> char -> unit
        = "caml_fill_string" [@@noalloc]
      val remove_spaces : string -> int -> int -> string
      val basic_sep : char -> string -> string * string
      val sep : char -> string -> string * string
      val split : ?multisep:bool -> char -> string -> string list
      val may_append : string -> sep:string -> string -> string
      val may_concat : string -> sep:string -> string -> string
      val first_diff : string -> string -> int -> int -> int
      module Table :
        sig
          type key = string
          type +!'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val min_binding_opt : 'a t -> (key * 'a) option
          val max_binding : 'a t -> key * 'a
          val max_binding_opt : 'a t -> (key * 'a) option
          val choose : 'a t -> key * 'a
          val choose_opt : 'a t -> (key * 'a) option
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val find_opt : key -> 'a t -> 'a option
          val find_first : (key -> bool) -> 'a t -> key * 'a
          val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
          val find_last : (key -> bool) -> 'a t -> key * 'a
          val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
          val to_seq : 'a t -> (key * 'a) Seq.t
          val to_rev_seq : 'a t -> (key * 'a) Seq.t
          val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
          val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
          val of_seq : (key * 'a) Seq.t -> 'a t
        end
      module Set :
        sig
          type elt = string
          type t
          val empty : t
          val is_empty : t -> bool
          val mem : elt -> t -> bool
          val add : elt -> t -> t
          val singleton : elt -> t
          val remove : elt -> t -> t
          val union : t -> t -> t
          val inter : t -> t -> t
          val disjoint : t -> t -> bool
          val diff : t -> t -> t
          val compare : t -> t -> int
          val equal : t -> t -> bool
          val subset : t -> t -> bool
          val iter : (elt -> unit) -> t -> unit
          val map : (elt -> elt) -> t -> t
          val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
          val for_all : (elt -> bool) -> t -> bool
          val exists : (elt -> bool) -> t -> bool
          val filter : (elt -> bool) -> t -> t
          val filter_map : (elt -> elt option) -> t -> t
          val partition : (elt -> bool) -> t -> t * t
          val cardinal : t -> int
          val elements : t -> elt list
          val min_elt : t -> elt
          val min_elt_opt : t -> elt option
          val max_elt : t -> elt
          val max_elt_opt : t -> elt option
          val choose : t -> elt
          val choose_opt : t -> elt option
          val split : elt -> t -> t * bool * t
          val find : elt -> t -> elt
          val find_opt : elt -> t -> elt option
          val find_first : (elt -> bool) -> t -> elt
          val find_first_opt : (elt -> bool) -> t -> elt option
          val find_last : (elt -> bool) -> t -> elt
          val find_last_opt : (elt -> bool) -> t -> elt option
          val of_list : elt list -> t
          val to_seq_from : elt -> t -> elt Seq.t
          val to_seq : t -> elt Seq.t
          val to_rev_seq : t -> elt Seq.t
          val add_seq : elt Seq.t -> t -> t
          val of_seq : elt Seq.t -> t
        end
      module Map :
        sig
          type key = string
          type +!'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val min_binding_opt : 'a t -> (key * 'a) option
          val max_binding : 'a t -> key * 'a
          val max_binding_opt : 'a t -> (key * 'a) option
          val choose : 'a t -> key * 'a
          val choose_opt : 'a t -> (key * 'a) option
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val find_opt : key -> 'a t -> 'a option
          val find_first : (key -> bool) -> 'a t -> key * 'a
          val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
          val find_last : (key -> bool) -> 'a t -> key * 'a
          val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
          val to_seq : 'a t -> (key * 'a) Seq.t
          val to_rev_seq : 'a t -> (key * 'a) Seq.t
          val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
          val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
          val of_seq : (key * 'a) Seq.t -> 'a t
        end
    end
  module Url_base :
    sig
      type t = string
      type uri = string
      val make_absolute_url :
        https:bool ->
        host:string ->
        port:int ->
        Ocsigen_lib_base.Url_base.uri -> Ocsigen_lib_base.Url_base.t
      type path = string list
      val remove_dotdot :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
      val remove_end_slash : string -> string
      val remove_internal_slash :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
      val change_empty_list :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
      val add_end_slash_if_missing :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
      val remove_slash_at_end :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
      val remove_slash_at_beginning :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
      val is_prefix_skip_end_slash : string list -> string list -> bool
      val split_fragment : string -> string * string option
      val join_path : Ocsigen_lib_base.Url_base.path -> string
      val split_path : string -> Ocsigen_lib_base.Url_base.path
      val norm_path :
        Ocsigen_lib_base.Url_base.path -> Ocsigen_lib_base.Url_base.path
    end
  val debug : string -> unit
end >>