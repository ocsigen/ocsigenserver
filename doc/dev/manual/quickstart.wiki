<<header |
  = Ocsigen Server =
  <<outline>>
>>

Ocsigen Server is a powerful and modular generic purpose Web Server.
It supports static files, redirections, reverse proxy, CORS, CGI,
user pages with local configuration, page compression,
authentication, etc.

Ocsigen Server can be used:
* as an executable: it reads its configuration from a file and dynamically loads
  the extensions and libraries you need for your sites, 
* or as a library: build your own executable and statically link your the
  modules you need for your pages.

It is written in OCaml and uses the
[[https://github.com/mirage/ocaml-cohttp|Cohttp]] library.

== Installation ==

The easier way to install Ocsigenserver is to use the {{{opam}}} package 
manager. Ocsigen Server is also available in Linux distributions.

== Using Ocsigen Server as an executable ==

Create your configuration file. You can take this one as an example:
{{{
<ocsigen>
  <server>
    <port>8080</port>

    <logdir>local/var/log/mysite</logdir>
    <datadir>local/var/data/mysite</datadir>
    <charset>utf-8</charset>

    <commandpipe>local/var/run/mysite-cmd</commandpipe>
    <extension findlib-package="ocsigenserver.ext.staticmod"/>
    <host hostfilter="*">
      <static dir="local/var/www/mysite/" />
    </host>
  </server>
</ocsigen>
}}}
Update the paths to match your configuration and create the missing directories.
Then run:
{{{
ocsigenserver -c <name of your configuration file>
}}}

=== Personalising your configuration ===

Have a look at the page <<a_manual chapter="config"|Configuration>> to
learn how to personalise the configuration file and adapt it to your
needs.

== Using Ocsigen Server as a library ==

If you want to include a Web Server in your OCaml app,
add library {{{ocsigenserver}}} and the extension you need 
(here {{{ocsigenserver.ext.staticmod}}}) in your Dune file:
{{{
(executable
 (public_name myapp)
 (name main)
 (libraries
  ocsigenserver
  ocsigenserver.ext.staticmod))
}}}
Call function <<a_api |val Ocsigen_server.start>> like this to run the server:
<<code language="ocaml"|
let _ =
  Ocsigen_server.start
    [ Ocsigen_server.host [Staticmod.run ~dir:"local/var/www/mysite/" ()]]
>>

The server runs on port 8080 by default.
Customise this using optional parameters of function
<<a_api |val Ocsigen_server.start>>

== Extensions ==

Depending on the features you need, you can extend the server by loading
some modules.

The extensions provided are:

;<<a_manual chapter="staticmod"|Staticmod>>
:for serving static pages,
;<<a_manual chapter="accesscontrol"|Accesscontrol>>
:if you need to restrict the access to the sites,
;<<a_manual chapter="eliom"|Eliom>>
:if you want to use dynamic Web and mobile applications written in OCaml with Eliom,
;<<a_manual chapter="revproxy"|Revproxy>>
:if you want to redirect some requests to another Web server,.
;<<a_manual chapter="redirectmod"|Redirectmod>>
:if you want to define some HTTP redirections,
;<<a_manual chapter="deflatemod"|Deflatemod>>
:if you want to compress the content before sending your pages,
;<<a_manual chapter="outputfilter"|Outputfilter>>
:allows to change the header of the HTTP response,
;<<a_manual chapter="rewritemod"|Rewritemod>>
:allows to rewrite the request before continuing,
;<<a_manual chapter="extendconfiguration"|Extendconfiguration>>
:adds many useful configuration options,
;<<a_manual chapter="authbasic"|Authbasic>>
:for basic HTTP authentication,
;<<a_manual chapter="cors"|CORS>>
:for settings CORS options,
;<<a_manual chapter="userconf"|Userconf>>
:for allowing local users to have personal pages,
;<<a_manual chapter="cgimod"|CGImod>>
:if you want to use dynamic Web sites written as CGI scripts (for example one way to run PHP pages).

If you are using a configuration, file, use tag 
{{{<extension/>}}} to load an exetnsion (see examples in the
manual of each extension). Most extension have configuration
options, and define new tags for the configuration file.

If you are building a static executable, load the extensions
as any library from your Dune file. Have a look at the API
documentation of each documentation to see the functions
it defines and the configuration options.

== Running on port 80 or 443 ==
It is not recommended to run a Web server as root.
If you want to use priviledged ports (port numbers less than 1024), like 80 or
443, you can add the capability to ocsigenserver with:
{{{
setcap 'cap_net_bind_service=+ep' <path to the server executable>
}}}

== If something goes wrong ==

If something goes wrong, first have a look in the logs to see if there
is an error message. The directory of logs is set in the configuration
file or through option {{{?logdir}}} of function
<<a_api|val Ocsigen_server.start>>
({{{$OPAM_SWITCH_PREFIX/lib/ocsigenserver/var/log/ocsigenserver}}} by 
default).

If you cannot solve your problem, if you find a bug,
a mistake in the documentation (even a small one),
or if you want to make a suggestion,
[[https://github.com/ocsigen/ocsigenserver|fill a ticket on Github]].
